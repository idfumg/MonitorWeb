{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"menu",
				"menu_buttons"
			],
			[
				"include",
				"include_dirs"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "function Servers(params) {\n    var self = this;\n\n    /* Public methods */\n    self.clean = _clean;\n    self.rebuild = _rebuild;\n    self.click_active = _click_active;\n    self.add_new_server_record = _add_new_server_record;\n    self.update_server = __update_server;\n    self.highlight_server_events_button = _highlight_server_events_button;\n\n    _setup_servers_container();\n\n    function _highlight_server_events_button(server_id, event_id) {\n        var servers = params.servers.find('.servers-records .server');\n        servers.each(function() {\n            var id = $(this).find('.id').text();\n            if (parseInt(id) === parseInt(server_id)) {\n                $(this).find('.event').addClass('active');\n            }\n        });\n    }\n\n    function _click_active() {\n        var active_server = params.servers.find('.servers-records .server.active');\n        if (active_server.html() !== '')\n            active_server.find('.name').click();\n    }\n\n    function _clean() {\n        var servers_records = params.servers.find('.server').not('.hidden');\n        servers_records.remove();\n    }\n\n    function _rebuild(records) {\n        var active_server = get_active_server();\n        var active_server_name = null;\n        if (active_server)\n            active_server_name = active_server.find('.name').text();\n        self.clean();\n\n        records.forEach(function(record) {\n            _add_new_server_record(record.name,\n                                   record.address,\n                                   record.port,\n                                   record.id,\n                                   record.name===active_server_name);\n        });\n    }\n\n    function _add_new_server_record(name, address, port, id, is_active) {\n        var servers_records = params.servers.find('.servers-records');\n        var new_server = servers_records.find('.server.hidden').clone();\n        new_server.removeClass('hidden');\n        new_server.find('.name').text(name);\n        new_server.find('.address').text(address);\n        new_server.find('.port').text(port);\n        new_server.find('.id').text(id);\n        if (is_active)\n            new_server.addClass('active');\n        servers_records.append(new_server);\n        _setup_server(new_server);\n    }\n\n    function _setup_server(server) {\n        server.find('.settings').click(function() {\n            params.servers_new.find('#name').val(server.find('.name').text());\n            params.servers_new.find('#address').val(server.find('.address').text());\n            params.servers_new.find('#port').val(server.find('.port').text());\n            params.servers_new.find('#id').val(server.find('.id').text());\n            params.servers_new.toggleClass('active-container');\n            server.toggleClass('modify');\n        });\n        server.find('.link').click(function() {\n            $(this).find('i')\n                .toggleClass('fa-chain-broken')\n                .toggleClass('fa-chain');\n        });\n        server.find('.name').click(function(e) {\n            $(this).parent().parent().find('.server').removeClass('active');\n            $(this).parent().addClass('active');\n            params.server_name_clicked_callback(server);\n        });\n        server.find('.remove').click(function() {\n            server.hide();\n            server.remove();\n        });\n        server.find('.event').click(function() {\n            var server_id = $(this).parent().find('.id').text();\n            var server_events = get_server_events(parseInt(server_id));\n            var events_occured = get_server_events_occured(server_id);\n            var events_records = $('.events-records');\n            params.events.find('.event').not('.hidden').remove();\n            if (server_events) {\n                server_events.forEach(function(event) {\n                    var new_event = params.events.find('.event.hidden').clone();\n                    new_event.removeClass('hidden');\n                    new_event.find('.text').val(event.text);\n                    new_event.find('.id').val(event.id);\n                    new_event.find('.text').click(function() {\n                    });\n                    new_event.find('.show').click(function() {\n                        params.event_clicked_callback(event.id);\n                    });\n                    events_occured.forEach(function(event_occurred_id) {\n                        if (event_occurred_id === event.id) {\n                            new_event.find('.show').addClass('active');\n                        }\n                    });\n                    events_records.append(new_event);\n                });\n            }\n            params.events.toggleClass('active-container');\n        });\n    }\n\n    function _new_server(name, address, port) {\n        if (!name || !address || !port) {\n            console.log('Missing name, address, port');\n            return;\n        }\n\n        name = name.slice(0, 19 /*max width*/);\n        params.new_server_callback(name, address, port);\n    }\n\n    function _update_server(name, address, port, server_id, server) {\n        if (!server_id || !name || !address || !port) {\n            console.log('Missing server_id | name | address | port');\n            return;\n        }\n\n        name = name.slice(0, 19 /*max width*/);\n        params.update_server_callback(name, address, port, server_id);\n    }\n\n    function __update_server(server_id, name, address, port) {\n        var server = params.servers.find('.servers-records .server.modify');\n        server.toggleClass('modify');\n        server.find('.name').text(name);\n        server.find('.address').text(address);\n        server.find('.port').text(port);\n    }\n\n    function _setup_servers_container() {\n        console.log('Setup servers container...');\n        var name = params.servers_new.find('#name');\n        var address = params.servers_new.find('#address');\n        var port = params.servers_new.find('#port');\n        var id = params.servers_new.find('#id');\n\n        params.servers.find('.new').click(function(e) {\n            name.val('');\n            address.val('');\n            port.val('');\n            id.val('');\n            params.servers_new.toggleClass('active-container');\n        });\n        params.servers_new.find('input[type=submit]').click(function(e) {\n            e.preventDefault();\n            params.servers_new.toggleClass('active-container');\n            var server = params.servers.find('.servers-records .server.modify');\n            if (server.html() === undefined)\n                _new_server(name.val(), address.val(), port.val());\n            else\n                _update_server(name.val(), address.val(), port.val(), id.val(), server);\n        });\n        params.servers.find('.server').each(function() {\n            _setup_server($(this));\n        });\n        params.events.find('.new').click(function() {\n            var new_event = params.events.find('.event.hidden').clone();\n            new_event.removeClass('hidden');\n            new_event.find('.text').val('');\n            new_event.find('.id').val();\n            var events_records = $('.events-records');\n            events_records.append(new_event);\n\n            $('.events-records .event').not('.hidden').find('input').filter(function() {\n                console.log($(this).val());\n                if ($(this).val() === '')\n                    console.log('found with no val');\n                return $(this).val() === '';\n            }).click();\n        });\n    }\n}\n",
			"file": "app/js/servers.js",
			"file_size": 7472,
			"file_write_time": 131226578887796054,
			"settings":
			{
				"buffer_size": 7472,
				"line_ending": "Unix"
			}
		},
		{
			"file": "app/js/common.js",
			"settings":
			{
				"buffer_size": 7489,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": ".gitignore",
			"settings":
			{
				"buffer_size": 93,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Package Control Messages\n========================\n\nBracketHighlighter\n------------------\n\n  # BracketHighlighter 2.23.0\n  \n  New release!\n  \n  This release introduces some breaking changes to `bh_tag.sublime-settings`.  \n  If you have no local changes in this file, you should have no problems. If  \n  you do have local changes in this settings file, you will need to update  \n  to comply with recent changes.\n  \n  Please see `Preferences->Package Settings->BracketHighlighter->Changelog`  \n  for more info about the release.\n",
			"settings":
			{
				"buffer_size": 526,
				"line_ending": "Unix",
				"name": "Package Control Messages",
				"read_only": true,
				"scratch": true
			}
		},
		{
			"file": "app/index.html",
			"settings":
			{
				"buffer_size": 4535,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 254.0,
		"last_filter": "remove",
		"selected_items":
		[
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"list",
				"Package Control: List Packages"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"linter",
				"SublimeLinter: Choose Gutter Theme"
			],
			[
				"mode",
				"SublimeLinter: Choose Lint Mode"
			]
		],
		"width": 575.0
	},
	"console":
	{
		"height": 361.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = 'df21e130d211cfc94d9b0905775a7c0f' + '1e3d39e33b79698005270310898eea76'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/idfumg/Dropbox/sync/project/monitorweb"
	],
	"file_history":
	[
		"/home/idfumg/.config/sublime-text-3/Packages/SublimeLinter/SublimeLinter.sublime-settings",
		"/home/idfumg/.config/sublime-text-3/Packages/MySignaturePlugin/MySignaturePlugin.sublime-settings",
		"/home/idfumg/Dropbox/sync/project/monitorweb/.gitignore",
		"/home/idfumg/Dropbox/sync/project/monitorweb/app/js/servers.js",
		"/home/idfumg/work/trunk2/src/pos_auth/pos_auth_base_tkt.h",
		"/home/idfumg/work/trunk2/src/pos_auth/pos_auth_types_blanks.h",
		"/home/idfumg/work/trunk2/src/rail/rail_confirm.cc",
		"/home/idfumg/work/trunk2/src/pos_auth/pos_auth_pnrdata.cc",
		"/home/idfumg/work/trunk2/trunk.sublime-project",
		"/home/idfumg/work/trunk2/buildFromScratch.sh",
		"/home/idfumg/.config/sublime-text-3/Packages/User/Preferences.sublime-settings",
		"/home/idfumg/.zshrc",
		"/home/idfumg/.config/sublime-text-3/Packages/User/Default.sublime-theme",
		"/home/idfumg/.config/sublime-text-3/Installed Packages/Alignment.sublime-package",
		"/home/idfumg/.config/sublime-text-3/Packages/User/Default (Linux).sublime-keymap",
		"/home/idfumg/work/trunk2/src/emd/Emd.h",
		"/home/idfumg/work/trunk2/src/emd/Emd.cc",
		"/home/idfumg/.config/sublime-text-3/Packages/User/SublimeLinter.sublime-settings",
		"/home/idfumg/.config/sublime-text-3/Packages/User/Package Control.sublime-settings",
		"/home/idfumg/.config/sublime-text-3/Packages/User/sidebar_separator.sublime-settings",
		"/home/idfumg/work/trunk2/src/tclmon.log",
		"/home/idfumg/.config/sublime-text-3/Packages/ClangAutoComplete/ClangAutoComplete.sublime-settings",
		"/home/idfumg/.config/sublime-text-3/Packages/User/ClangAutoComplete.sublime-settings",
		"/home/idfumg/work/trunk2/src/rail/rail_order.cc",
		"/home/idfumg/work/trunk2/src/rail/rail_types.cc",
		"/home/idfumg/work/trunk2/src/pos_auth/pos_auth_pnrdata.h",
		"/home/idfumg/.config/sublime-text-3/Packages/Default/Default (Linux).sublime-keymap",
		"/home/idfumg/work/trunk2/externallibs/boost/include/boost/iostreams/detail/optional.hpp",
		"/home/idfumg/work/trunk2/src/rail/rail_types.h",
		"/home/idfumg/.config/sublime-text-3/Packages/Alignment/Default (Linux).sublime-keymap",
		"/home/idfumg/.config/sublime-text-3/Packages/AdvancedNewFile/Default (Linux).sublime-keymap",
		"/home/idfumg/.config/sublime-text-3/Packages/AdvancedNewFile/AdvancedNewFile.sublime-settings",
		"/home/idfumg/.config/sublime-text-3/Packages/User/AdvancedNewFile.sublime-settings",
		"/home/idfumg/work/trunk2/src/rail/rail_order.h",
		"/home/idfumg/.config/sublime-text-3/Packages/SublimeLinter/Default (Linux).sublime-keymap",
		"/home/idfumg/.config/sublime-text-3/Packages/SidebarSeparator/SidebarSeparator.sublime-settings",
		"/home/idfumg/.config/sublime-text-3/Packages/BracketHighlighter/bh_core.sublime-settings",
		"/home/idfumg/work/rail_confirm_data_2016",
		"/home/idfumg/work/rail_refund_data_2016",
		"/tmp/1.log",
		"/tmp/2.log"
	],
	"find":
	{
		"height": 28.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"monitorweb",
			"editor",
			";\n",
			"Recloc",
			"recloc",
			"Recloc",
			"side",
			"ctrl+home",
			"buffer",
			"start",
			"begin",
			"buffer",
			"ыефке",
			"move_to",
			"move",
			"indent",
			"ctrl+}",
			"ctrl+{",
			"+{",
			"\"{\"",
			"change",
			"layout",
			"column",
			"split",
			"plit",
			"pane",
			"forward",
			"jump",
			"upper",
			"up",
			"ctrl+shift+up",
			"5556100000001",
			"pos_auth dump",
			"dump_",
			"dump",
			"pnrdata",
			"TApcReturn::add",
			"TApcReturn::addTApcReturn::add",
			"TApcReturn::add",
			"apc_return",
			"apc_",
			"pnrdata",
			"fcomb=13",
			"fcomb=",
			"fcomb",
			"updatedocnumbers",
			"5556100000001",
			"Д",
			"Д2",
			"Д1",
			"ПБ",
			"pos_auth_end_",
			"647000",
			"pos_auth_end",
			"pos_auth_end_",
			"647000",
			"apc_return=",
			"8145",
			"523500",
			"814500",
			"5235"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 3,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "app/js/servers.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7472,
						"regions":
						{
						},
						"selection":
						[
							[
								341,
								341
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "app/js/common.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7489,
						"regions":
						{
						},
						"selection":
						[
							[
								3122,
								3122
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1333.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": ".gitignore",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 93,
						"regions":
						{
						},
						"selection":
						[
							[
								56,
								56
							],
							[
								74,
								74
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 3,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 526,
						"regions":
						{
						},
						"selection":
						[
							[
								526,
								526
							]
						],
						"settings":
						{
							"auto_indent": false,
							"bracket_highlighter.busy": false,
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_width": 2,
							"word_wrap": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "app/index.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4535,
						"regions":
						{
						},
						"selection":
						[
							[
								3862,
								3862
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"syntax": "Packages/HTML/HTML.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 504.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 28.0
	},
	"input":
	{
		"height": 66.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "monitorweb.sublime-project",
	"replace":
	{
		"height": 52.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"index",
				"app/index.html"
			],
			[
				"common",
				"app/js/common.js"
			],
			[
				"pos_auth_void",
				"src/pos_auth/pos_auth_void.cc"
			],
			[
				"tclmn",
				"src/tclmon.log"
			],
			[
				"pos_auth_payer_ot_on_partial_auth.ts",
				"src/ts/pos_auth/pos_auth_payer_OT_on_partial_auth.ts"
			],
			[
				"posauthpnr",
				"src/pos_auth/pos_auth_pnrdata.cc"
			],
			[
				"pos_auth_end",
				"src/pos_auth/pos_auth_end_transaction.cc"
			],
			[
				"tclm",
				"src/tclmon.log"
			],
			[
				"pos_auth",
				"src/pos_auth/pos_auth_pnrdata.cc"
			],
			[
				"confirm.cc",
				"src/rail/rail_confirm.cc"
			],
			[
				"rail_order.cc",
				"src/rail/rail_order.cc"
			],
			[
				"pos_auth_pnrda",
				"src/pos_auth/pos_auth_pnrdata.h"
			],
			[
				"",
				"src/rail/rail_types.cc"
			],
			[
				"rail_order",
				"src/rail/rail_order.cc"
			],
			[
				"rail_types.cc",
				"src/rail/rail_types.cc"
			],
			[
				"rail_types.h",
				"src/rail/rail_types.h"
			],
			[
				"rail_order.h",
				"src/rail/rail_order.h"
			],
			[
				"rail_typ",
				"src/rail/rail_types.cc"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": false,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": false,
	"side_bar_width": 227.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
